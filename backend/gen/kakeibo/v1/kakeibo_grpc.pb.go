// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kakeibo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KakeiboServiceClient is the client API for KakeiboService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KakeiboServiceClient interface {
	// Get a statistics data.
	GetStatsData(ctx context.Context, in *GetStatsDataRequest, opts ...grpc.CallOption) (*GetStatsDataResponse, error)
	// List all sources.
	ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error)
	// List all categories in given parent category.
	ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	// List all money forward record in given request.
	ListMoneyForwardRecords(ctx context.Context, in *ListMoneyForwardRecordsRequest, opts ...grpc.CallOption) (*ListMoneyForwardRecordsResponse, error)
}

type kakeiboServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKakeiboServiceClient(cc grpc.ClientConnInterface) KakeiboServiceClient {
	return &kakeiboServiceClient{cc}
}

func (c *kakeiboServiceClient) GetStatsData(ctx context.Context, in *GetStatsDataRequest, opts ...grpc.CallOption) (*GetStatsDataResponse, error) {
	out := new(GetStatsDataResponse)
	err := c.cc.Invoke(ctx, "/kakeibo.v1.KakeiboService/GetStatsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kakeiboServiceClient) ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error) {
	out := new(ListSourcesResponse)
	err := c.cc.Invoke(ctx, "/kakeibo.v1.KakeiboService/ListSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kakeiboServiceClient) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, "/kakeibo.v1.KakeiboService/ListCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kakeiboServiceClient) ListMoneyForwardRecords(ctx context.Context, in *ListMoneyForwardRecordsRequest, opts ...grpc.CallOption) (*ListMoneyForwardRecordsResponse, error) {
	out := new(ListMoneyForwardRecordsResponse)
	err := c.cc.Invoke(ctx, "/kakeibo.v1.KakeiboService/ListMoneyForwardRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KakeiboServiceServer is the server API for KakeiboService service.
// All implementations must embed UnimplementedKakeiboServiceServer
// for forward compatibility
type KakeiboServiceServer interface {
	// Get a statistics data.
	GetStatsData(context.Context, *GetStatsDataRequest) (*GetStatsDataResponse, error)
	// List all sources.
	ListSources(context.Context, *ListSourcesRequest) (*ListSourcesResponse, error)
	// List all categories in given parent category.
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	// List all money forward record in given request.
	ListMoneyForwardRecords(context.Context, *ListMoneyForwardRecordsRequest) (*ListMoneyForwardRecordsResponse, error)
	mustEmbedUnimplementedKakeiboServiceServer()
}

// UnimplementedKakeiboServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKakeiboServiceServer struct {
}

func (UnimplementedKakeiboServiceServer) GetStatsData(context.Context, *GetStatsDataRequest) (*GetStatsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatsData not implemented")
}
func (UnimplementedKakeiboServiceServer) ListSources(context.Context, *ListSourcesRequest) (*ListSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSources not implemented")
}
func (UnimplementedKakeiboServiceServer) ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedKakeiboServiceServer) ListMoneyForwardRecords(context.Context, *ListMoneyForwardRecordsRequest) (*ListMoneyForwardRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMoneyForwardRecords not implemented")
}
func (UnimplementedKakeiboServiceServer) mustEmbedUnimplementedKakeiboServiceServer() {}

// UnsafeKakeiboServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KakeiboServiceServer will
// result in compilation errors.
type UnsafeKakeiboServiceServer interface {
	mustEmbedUnimplementedKakeiboServiceServer()
}

func RegisterKakeiboServiceServer(s grpc.ServiceRegistrar, srv KakeiboServiceServer) {
	s.RegisterService(&KakeiboService_ServiceDesc, srv)
}

func _KakeiboService_GetStatsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KakeiboServiceServer).GetStatsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kakeibo.v1.KakeiboService/GetStatsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KakeiboServiceServer).GetStatsData(ctx, req.(*GetStatsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KakeiboService_ListSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KakeiboServiceServer).ListSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kakeibo.v1.KakeiboService/ListSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KakeiboServiceServer).ListSources(ctx, req.(*ListSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KakeiboService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KakeiboServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kakeibo.v1.KakeiboService/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KakeiboServiceServer).ListCategories(ctx, req.(*ListCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KakeiboService_ListMoneyForwardRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMoneyForwardRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KakeiboServiceServer).ListMoneyForwardRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kakeibo.v1.KakeiboService/ListMoneyForwardRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KakeiboServiceServer).ListMoneyForwardRecords(ctx, req.(*ListMoneyForwardRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KakeiboService_ServiceDesc is the grpc.ServiceDesc for KakeiboService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KakeiboService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kakeibo.v1.KakeiboService",
	HandlerType: (*KakeiboServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatsData",
			Handler:    _KakeiboService_GetStatsData_Handler,
		},
		{
			MethodName: "ListSources",
			Handler:    _KakeiboService_ListSources_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _KakeiboService_ListCategories_Handler,
		},
		{
			MethodName: "ListMoneyForwardRecords",
			Handler:    _KakeiboService_ListMoneyForwardRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kakeibo/v1/kakeibo.proto",
}
